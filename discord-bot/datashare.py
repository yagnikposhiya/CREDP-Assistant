"""
Author: Yagnik Poshiya
GitHub: @yagnikposhiya
Charusat Rural Education Development Program
Charotar University of Science and Technology
"""

import csv
import pytz
import datetime
import reportlab
import pandas as pd
from tabulate import tabulate
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Image, Paragraph, Spacer


def CSVToPDF(file_path_csv,dataframe,usermessage,username,prefix):
  # required variables
  base_path = 'attendance-sheet-pdf/'
  username_formatted = ''.join(username.split())
  local_timezone = pytz.timezone('Asia/Kolkata')
  current_time = datetime.datetime.now(local_timezone)
  format_time = current_time.strftime('%d-%m-%Y_%I%M%p')
  file = prefix + username_formatted + '_' + format_time + '.pdf'
  file_path_pdf = base_path + file
  table_data = []
  content = []

  # print whether it is student attendance sheet or volunteer attendance sheet
  if prefix == 'S_':
    if usermessage.startswith('/student-atdsum'):
      date_of_atd = usermessage.split(' ')
      date_of_atd = date_of_atd[1]
      atd_string = 'Student Attendance'
    elif usermessage.startswith('/student-atdall'):
      date_of_atd = usermessage.split(' ')
      date_of_atd = date_of_atd[1]
      atd_string = 'Student Attendance | Std. All'
    else:
      params = usermessage.split(' ')
      atd_string = 'Student Attendance | Std. ' + str(params[2])
      date_of_atd = params[1]
  elif prefix == 'V_':
    atd_string = 'Volunteer Attendance'
    date_of_atd = usermessage.split(' ')
    date_of_atd = date_of_atd[1]

  # set the font for the whole pdf file
  pdfmetrics.registerFont(TTFont('TimesNewRoman', 'fonts/TimesNewRoman/times-new-roman.ttf'))
  styles = getSampleStyleSheet()
  custom_font_style = styles['Normal'].clone('CustomFontStyle')
  custom_font_style.fontName = 'TimesNewRoman'
  
  # add logo to the pdf file
  organization_logo = Image('logo/credp-high-resolution.jpg', width=60, height=60)
  content.append(organization_logo)

  # add heading to the pdf file
  heading_style = ParagraphStyle(name='CustomHeadingStyle', fontSize=18, fontName='TimesNewRoman', alignment=1)
  heading_text = "Charusat Rural Education Development Program (CREDP)"
  heading = Paragraph(heading_text, heading_style)
  content.append(heading)

  # add spacer for separation
  content.append(Spacer(1, 0.2*50))

  # add metadata to the pdf file
  metadata_style = ParagraphStyle(name='CustomMetadataStyle', fontSize=12, fontName='Times-Roman', alignment=1)
  metadata_text = f"Date & Time: {current_time.strftime('%d-%m-%Y %I:%M %p')} | Generated By: {username} | {atd_string} | Date of ATD: {date_of_atd}"
  metadata = Paragraph(metadata_text, metadata_style)
  content.append(metadata)

  # add spacer for separation
  content.append(Spacer(1, 0.2*50))
  
  # write the table to the pdf file
  with open(file_path_csv,'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
      table_data.append(row)

  pdf = SimpleDocTemplate(file_path_pdf, pagesize=landscape((792,842)))
  table = Table(table_data)
  table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), (0.7, 0.7, 0.7))]))
  table.setStyle(TableStyle([('FONTSIZE', (0, 0), (-1, -1), 12)]))
  table.setStyle(TableStyle([('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman')]))
  content.append(table)

  # add extra metadata for student attendance summary
  if usermessage.startswith('/student-atdsum'):
    content.append(Spacer(1, 0.2 * 150))
    text = f"Total Students: {dataframe['Total'].sum()}"
    text_style = ParagraphStyle(name='CustomSignatureStyle', fontSize=12, fontName='TimesNewRoman', alignment=1)
    addon_data = Paragraph(text, text_style)
    content.append(addon_data)

    text = f"Total Present Students: {dataframe['Present'].sum()}"
    text_style = ParagraphStyle(name='CustomSignatureStyle', fontSize=12, fontName='TimesNewRoman', alignment=1)
    addon_data = Paragraph(text, text_style)
    content.append(addon_data)
  
  # build the pdf document
  pdf.build(content)

  return file_path_pdf


def getCSVFile(json_data,usermessage,username,prefix):
  col_name_dict = {'std':'Standard','total':'Total','present':'Present','absent':'Absent','name':'Name','student_id':'Student-ID',
                  'student_name':'Student Name', 'department':'Department','institute':'Institute','in_time':'In-Time','out_time':'Out-Time'}
  
  base_path = 'attendance-sheet-csv/'
  username_formatted = ''.join(username.split())
  local_timezone = pytz.timezone('Asia/Kolkata')
  current_time = datetime.datetime.now(local_timezone)
  format_time = current_time.strftime('%d-%m-%Y_%I%M%p')
  file = prefix + username_formatted + '_' + format_time + '.csv'
  file_path = base_path + file
  
  dataframe = pd.DataFrame(json_data)
  column_names = dataframe.columns.tolist()
  new_column_names = []
  
  for col in column_names:
    if col in col_name_dict.keys():
      new_column_names.append(col_name_dict[col])

  dataframe.columns = new_column_names

  if usermessage.startswith('/volunteer-atd'):
    dataframe['Standard'].fillna(0, inplace=True)
    dataframe['Standard'] = dataframe['Standard'].astype(int)
    dataframe['Department'] = dataframe['Department'].str.upper()
    dataframe['Institute'] = dataframe['Institute'].str.upper()
    dataframe['Student-ID'] = dataframe['Student-ID'].str.upper()
  
  if 'Present' in dataframe.columns:
    if usermessage.startswith('/student-atd ') or usermessage.startswith('/volunteer-atd') or usermessage.startswith('/student-atdall'):
      dataframe['Present'] = dataframe['Present'].replace({0:'No',1:'Yes'})

  dataframe.to_csv(file_path,index=False)

  params = usermessage.split(' ')
  file_format = params[-1]
  if file_format == 'CSV':
    return file_path
  else:
    response_file_path = CSVToPDF(file_path,dataframe,usermessage,username,prefix)
    return response_file_path
  