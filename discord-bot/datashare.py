"""
Author: Yagnik Poshiya
GitHub: @yagnikposhiya
Charusat Rural Education Development Program
Charotar University of Science and Technology
"""

import os
import csv
import yaml
import pytz
import PyPDF2
import datetime
import reportlab
import pandas as pd
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from pypdf import PdfWriter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Image, Paragraph, Spacer

# load config file
with open('config/config.yaml','r') as stream:
  config = yaml.safe_load(stream)


def CSVToPDF(file_path_csv,dataframe,usermessage,username,prefix):
  # required variables
  base_path = config['PDF_CSV_formatting']['pdf']['pdf_base_path']

  if not os.path.exists(base_path): # make directory if it does not exist
    os.makedirs(base_path)
  
  username_formatted = ''.join(username.split())
  local_timezone = pytz.timezone(config['timezone']['local_timezone'])
  current_time = datetime.datetime.now(local_timezone)
  format_time = current_time.strftime('%d-%m-%Y_%I%M%S%p')
  file = prefix + username_formatted + '_' + format_time + '.pdf'
  file_path_pdf = base_path + file
  table_data = []
  content = []

  # print whether it is student attendance sheet or volunteer attendance sheet
  if prefix == 'S_':
    if usermessage.startswith('/student-atdsum'):
      date_of_atd = usermessage.split(' ')
      date_of_atd = date_of_atd[1]
      atd_string = 'Student Attendance'
    elif usermessage.startswith('/student-atdall'):
      date_of_atd = usermessage.split(' ')
      date_of_atd = date_of_atd[1]
      atd_string = 'Student Attendance | Std. All'
    else:
      params = usermessage.split(' ')
      atd_string = 'Student Attendance | Std. ' + str(params[2])
      date_of_atd = params[1]
  elif prefix == 'VA_':
    atd_string = 'Volunteer Attendance'
    date_of_atd = usermessage.split(' ')
    date_of_atd = date_of_atd[1]
  elif prefix == 'VT_':
    atd_string = 'Subjects Taught'
    date_of_atd = usermessage.split(' ')
    date_of_atd = date_of_atd[1]

  # set the font for the whole pdf file
  pdfmetrics.registerFont(TTFont('TimesNewRoman', config['PDF_CSV_formatting']['font_path']))
  styles = getSampleStyleSheet()
  custom_font_style = styles['Normal'].clone('CustomFontStyle')
  custom_font_style.fontName = 'TimesNewRoman'
  
  # add logo to the pdf file
  organization_logo = Image(config['PDF_CSV_formatting']['additional']['credp_logo'], width=60, height=60)
  content.append(organization_logo)

  # add heading to the pdf file
  heading_style = ParagraphStyle(name='CustomHeadingStyle', fontSize=18, fontName='TimesNewRoman', alignment=1)
  heading_text = config['PDF_CSV_formatting']['additional']['heading_text']
  heading = Paragraph(heading_text, heading_style)
  content.append(heading)

  # add spacer for separation
  content.append(Spacer(1, 0.2*50))

  # add metadata to the pdf file
  metadata_style = ParagraphStyle(name='CustomMetadataStyle', fontSize=12, fontName='TimesNewRoman', alignment=1)
  metadata_text = f"Date & Time: {current_time.strftime('%d-%m-%Y %I:%M %p')} | Generated By: {username} | {atd_string} | Date of ATD: {date_of_atd}"
  metadata = Paragraph(metadata_text, metadata_style)
  content.append(metadata)

  # add spacer for separation
  content.append(Spacer(1, 0.2*50))
  
  # write the table to the pdf file
  with open(file_path_csv,'r') as f:
    csv_reader = csv.reader(f)
    for row in csv_reader:
      table_data.append(row)

  pdf = SimpleDocTemplate(file_path_pdf, pagesize=landscape((792,842)))
  table = Table(table_data)
  table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), (0.7, 0.7, 0.7))]))
  table.setStyle(TableStyle([('BOX', (0, 0), (-1, 0), 1, colors.black)]))
  table.setStyle(TableStyle([('FONTSIZE', (0, 0), (-1, -1), 12)]))
  table.setStyle(TableStyle([('FONTNAME', (0, 0), (-1, -1), 'TimesNewRoman')]))

  # add bounding box to the entry which has "No" value in the "Present" column
  if ('Present' in dataframe.columns) and (usermessage.startswith('/student-atd ') or usermessage.startswith('/volunteer-atd') or usermessage.startswith('/student-atdall')):
      column_index = dataframe.columns.get_loc('Present')
      for i, row in enumerate(table_data[1:], start=1):
        if row[column_index] == 'No':
          table.setStyle(TableStyle([('BACKGROUND', (0, i), (-1, i), (0.7,0.7,0.7)),
                                     ('TEXTCOLOR', (0, i), (-1, i), colors.black),
                                     ('INNERGRID', (0, i), (-1, i), 1, (0.7,0.7,0.7))]))        
  content.append(table)

  # add extra metadata for student attendance summary
  if usermessage.startswith('/student-atdsum'):
    content.append(Spacer(1, 0.2 * 150))
    text = f"Total Students: {dataframe['Total'].sum()}"
    text_style = ParagraphStyle(name='CustomSignatureStyle', fontSize=12, fontName='TimesNewRoman', alignment=1)
    addon_data = Paragraph(text, text_style)
    content.append(addon_data)

    text = f"Total Present Students: {dataframe['Present'].sum()}"
    text_style = ParagraphStyle(name='CustomSignatureStyle', fontSize=12, fontName='TimesNewRoman', alignment=1)
    addon_data = Paragraph(text, text_style)
    content.append(addon_data)
  
  # build the pdf document
  pdf.build(content)

  return file_path_pdf

# create CSV file from the dataframe
def getCSVFile(json_data,usermessage,username,prefix):
  col_name_dict = config['PDF_CSV_formatting']['columnnames']['col_dict']
  base_path = config['PDF_CSV_formatting']['csv']['csv_base_path']

  if not os.path.exists(base_path): # make directory if it does not exist
    os.makedirs(base_path)

  username_formatted = ''.join(username.split())
  local_timezone = pytz.timezone(config['timezone']['local_timezone'])
  current_time = datetime.datetime.now(local_timezone)
  format_time = current_time.strftime('%d-%m-%Y_%I%M%S%p')
  file = prefix + username_formatted + '_' + format_time + '.csv'
  file_path = base_path + file # generate file path

  # extract column name as a list
  dataframe = pd.DataFrame(json_data)
  column_names = dataframe.columns.tolist()
  new_column_names = []

  # update column names in the dataframe
  for col in column_names:
    if col in col_name_dict.keys():
      new_column_names.append(col_name_dict[col])

  dataframe.columns = new_column_names

  # set uppercase for specific columns
  if usermessage.startswith('/volunteer-atd'):
    dataframe['Standard'].fillna(0, inplace=True)
    dataframe['Standard'] = dataframe['Standard'].astype(int)
    dataframe['Department'] = dataframe['Department'].str.upper()
    dataframe['Institute'] = dataframe['Institute'].str.upper()
    dataframe['Student-ID'] = dataframe['Student-ID'].str.upper()

  # replace 0/1 with yes/no in the present column
  if 'Present' in dataframe.columns:
    if usermessage.startswith('/student-atd ') or usermessage.startswith('/volunteer-atd') or usermessage.startswith('/student-atdall'):
      dataframe['Present'] = dataframe['Present'].replace({0:'No',1:'Yes'})

  # convert dataframe into the CSV file
  dataframe.to_csv(file_path,index=False)

  # generate pdf file by default and if CSV is provide then generate only CSV file
  params = usermessage.split(' ')
  file_format = params[-1]
  if file_format == 'CSV':
    return file_path
  else:
    response_file_path = CSVToPDF(file_path,dataframe,usermessage,username,prefix)
    return response_file_path


def PDFMerger(input_files_path,username):
  base_path = config['PDF_CSV_formatting']['pdf']['pdf_base_path']

  if not os.path.exists(base_path): # make directory if it does not exist
    os.makedirs(base_path)
  
  prefix = 'VS_'
  username_formatted = ''.join(username.split())
  local_timezone = pytz.timezone(config['timezone']['local_timezone'])
  current_time = datetime.datetime.now(local_timezone)
  format_time = current_time.strftime('%d-%m-%Y_%I%M%S%p')
  file = prefix + username_formatted + '_' + format_time + '.pdf'
  output_file_path = base_path + file
  
  merger = PdfWriter()
  for pdf in input_files_path:
    merger.append(pdf)

  merger.write(output_file_path)
  merger.close()

  return output_file_path